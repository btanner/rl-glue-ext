
;;; Copyright 2008 Gabor Balazs
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;
;;; $Revision$
;;; $Date$

(in-package #:rl-glue-tests)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Test experiment.

(defclass test-experiment (experiment)
  ((test-name
    :reader test-name
    :initarg :test-name
    :initform (error "Must specify test name!")
    :documentation "Name of the test.")
   (test-failed
    :accessor test-failed
    :initform 0
    :documentation "Counter of failed tests.")
   (test-count
    :accessor test-count
    :initform 0
    :documentation "Counter of passed tests."))
  (:documentation "Base of test experiments."))

(defmacro check (exp compare expected-form got-form)
  (let ((expected (gensym)) (got (gensym)))
    `(let ((,expected ,expected-form) (,got ,got-form))
       (with-accessors ((test-count test-count) (test-failed test-failed)) ,exp
         (incf test-count)
         (unless (funcall ,compare ,expected ,got)
           (format t "Failed #~a, expected ~a, got ~a~%"
                   test-count ,expected ,got)
           (format t "            ~a <> ~a~%" ',expected-form ',got-form)
           (incf test-failed))))))

(defun summarize-stat (exp)
  "Prints a summary and returns the number of failed checks."
  (with-accessors ((test-name test-name)
                   (test-failed test-failed)
                   (test-count test-count)) exp
    (if (plusp test-failed)
        (format t "Failed ~a / ~a checks in ~a~%"
                test-failed test-count test-name)
        (format t "Passed all ~a checks in ~a~%"
                test-count test-name))
    test-failed))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Common purpose test functions.

(defun gen-adt-array (size type gen-fn)
  "Generates and returns an ADT array of SIZE number of TYPE elements 
which are generated by to GEN-FN function."
  (make-array size
              :element-type type
              :initial-contents
              (loop
                 with list = '()
                 for i from 0 to (1- size)
                 do (push (funcall gen-fn i) list)
                 finally (return (nreverse list)))))

(defun fill-adt (adt &key ints floats chars)
  "Fills and returns an ADT with the specified number of data."
  (with-accessors ((iarr int-array) (farr float-array) (cstr char-string)) adt
    (when ints
      (setf iarr (gen-adt-array ints
                                'integer
                                #'(lambda (i) i))))
    (when floats
      (setf farr (gen-adt-array floats
                                'float
                                #'(lambda (i) (/ i floats)))))
    (when chars
      (setf cstr (gen-adt-array chars
                                'character
                                #'(lambda (i)
                                    (code-char (+ (char-code #\a) i)))))))
  adt)

(defun create-answer-message (step-count input-message)
  "Creates and returns a usual answer message
from the input one used during testing."
  (concatenate 'string
               input-message "|"
               (format nil "~{~a.~}" (loop repeat (mod step-count 3)
                                        collect step-count))
               "|" input-message))

