
LISP_IMPL ?= $(shell \
	            (which sbcl >/dev/null 2>&1 && echo sbcl) || \
	            (which lisp >/dev/null 2>&1 && echo cmucl) || \
	            (which clisp >/dev/null 2>&1 && echo clisp) || \
	            (which ccl >/dev/null 2>&1 && echo openmcl))

ifeq ($(origin LISP_EXEC_LOCK), undefined)

ifeq ($(LISP_IMPL), sbcl)
LISP_PATH ?= $(shell which sbcl)
LISP_EXEC = $(LISP_PATH) --noinform
LISP_EVAL = --eval
LISP_EXEC += $(LISP_EVAL) "(require 'asdf)"
else
ifeq ($(LISP_IMPL), cmucl)
LISP_PATH ?= $(shell which lisp)
LISP_EXEC = $(LISP_PATH) -quiet
LISP_EVAL = -eval
LISP_EXEC += $(LISP_EVAL) "(require 'asdf)"
else
ifeq ($(LISP_IMPL), clisp)
LISP_PATH ?= $(shell which clisp)
LISP_EXEC = $(LISP_PATH) -q -q -K full
LISP_EVAL = -x
LISP_EXEC += $(LISP_EVAL) "(setf custom:*load-paths* \
	                         (append custom:*load-paths* \
	                                 (list $(LISP_FMT_ASDF_DIRS))))"
LISP_EXEC += $(LISP_EVAL) "(require \"asdf\")"
else
ifeq ($(LISP_IMPL), openmcl)
LISP_PATH ?= $(shell which ccl)
LISP_EXEC = $(LISP_PATH)
LISP_EVAL = --eval
LISP_EXEC += $(LISP_EVAL) "(require 'asdf)"
else
$(error Not supported lisp implementation : $(LISP_EXEC))
endif
endif
endif
endif

endif # lisp exec lock

LISP_ASDF_DIRS ?= \
	/usr/share/common-lisp/source/asdf/ \
	/usr/share/common-lisp/systems/

LISP_FMT_ASDF_DIRS = $(patsubst %,\#P\"%\",$(LISP_ASDF_DIRS))

RL_GLUE_SRC_PATH ?= $(RL_GLUE_BASE_PATH)/src
RL_GLUE_TESTS_PATH ?= $(RL_GLUE_BASE_PATH)/test
RL_GLUE_BUILD_PATH ?= $(RL_GLUE_BASE_PATH)/build
RL_GLUE_EXAMPLE_PATH ?= $(RL_GLUE_BASE_PATH)/example

RL_GLUE_CLCDC_PATH ?= $(RL_GLUE_SRC_PATH)/rl-glue-clcdc
RL_GLUE_UTILS_PATH ?= $(RL_GLUE_SRC_PATH)/rl-glue-utils

###############################################################################
### Load and compilation lisp forms.

lisp_load = $(LISP_EVAL) "(load $(call quote,$(1)))"

asdf_operate = (asdf:operate '$(strip $(1)) '$(strip $(2)) :verbose nil)
asdf_compile = $(LISP_EVAL) "$(call asdf_operate, asdf:compile-op, $(1))"
asdf_load = $(LISP_EVAL) \
	"(unless (asdf::system-registered-p '$(strip $(1))) \
	   $(call asdf_operate, asdf:load-op, $(1)))"

###############################################################################
### Initializing ASDF central registry.

ifeq ($(origin LISP_EXEC_LOCK), undefined)

LISP_EXEC += \
	$(LISP_EVAL) "(setf asdf:*central-registry* \
	                    (append (list \#P\"$(RL_GLUE_CLCDC_PATH)/\" \
						              \#P\"$(RL_GLUE_UTILS_PATH)/\" \
						              \#P\"$(RL_GLUE_TESTS_PATH)/\" \
						              \#P\"$(RL_GLUE_EXAMPLE_PATH)/\" \
	                                  $(LISP_FMT_ASDF_DIRS)) \
	                            asdf:*central-registry*))" \
	$(call asdf_load, asdf-binary-locations) \
	$(LISP_EVAL) "(setf asdf:*centralize-lisp-binaries* t)" \
	$(LISP_EVAL) "(setf asdf:*default-toplevel-directory* \
	                    \#P\"$(realpath $(RL_GLUE_BUILD_PATH))/\")"
endif

###############################################################################
### Running lisp commands.

lisp_run = $(LISP_EXEC) $(strip $(1)) $(LISP_EVAL) "(quit)"
lisp_compile_asdf = $(call lisp_run, $(call asdf_compile, $(1)))

###############################################################################
### Global targets.

find_sources = $(shell find $(strip $(1)) -name '*.lisp' -type f)

RL_GLUE_CLCDC_SOURCES = $(call find_sources, $(RL_GLUE_CLCDC_PATH))
RL_GLUE_UTILS_SOURCES = $(call find_sources, $(RL_GLUE_UTILS_PATH))
RL_GLUE_TESTS_SOURCES = $(call find_sources, $(RL_GLUE_TESTS_PATH))
RL_GLUE_EXAMPLES_SOURCES = $(call find_sources, $(RL_GLUE_EXAMPLE_PATH))

###############################################################################
### Default targets.

make_target = $(RL_GLUE_BUILD_PATH)/$(strip $(1))-$(strip $(LISP_IMPL))
RL_GLUE_CLCDC_TARGET = $(call make_target, rl-glue-clcdc)
RL_GLUE_UTILS_TARGET = $(call make_target, rl-glue-utils)
RL_GLUE_TESTS_TARGET = $(call make_target, rl-glue-tests)
RL_GLUE_EXAMPLES_TARGET = $(call make_target, rl-glue-examples)

LISP_EXEC_LOCK ?= 1

.PHONY: all
all: $(TARGETS)

$(RL_GLUE_CLCDC_TARGET): $(RL_GLUE_CLCDC_SOURCES)
	$(call lisp_compile_asdf, rl-glue-clcdc)
	touch $@

$(RL_GLUE_UTILS_TARGET): $(RL_GLUE_UTILS_SOURCES)
	$(call lisp_compile_asdf, rl-glue-utils)
	touch $@

$(RL_GLUE_TESTS_TARGET): $(RL_GLUE_CLCDC_TARGET) \
                         $(RL_GLUE_UTILS_TARGET) \
                         $(RL_GLUE_TESTS_SOURCES)
	$(call lisp_compile_asdf, rl-glue-tests)
	touch $@

$(RL_GLUE_EXAMPLES_TARGET): $(RL_GLUE_CLCDC_TARGET) \
                            $(RL_GLUE_UTILS_TARGET) \
                            $(RL_GLUE_EXAMPLES_SOURCES)
	$(call lisp_compile_asdf, rl-glue-examples)
	touch $@

###############################################################################
### Lisp starter shell script creation.

shvarname = `echo -e \$${$(1)}`

RLGLUE_HOST = $(call shvarname,RLGLUE_HOST)
RLGLUE_HOST_SH =\
	if [ -n "$(RLGLUE_HOST)" ]; then\
	RLGLUE_HOST=" :host \"$(RLGLUE_HOST)\"";\
	fi\n

RLGLUE_PORT = $(call shvarname,RLGLUE_PORT)
RLGLUE_PORT_SH =\
	if [ -n "$(RLGLUE_PORT)" ]; then\
	RLGLUE_PORT=" :port $(RLGLUE_PORT)";\
	fi\n

RLGLUE_AUTORECONNECT = $(call shvarname,RLGLUE_AUTORECONNECT)
RLGLUE_AUTORECONNECT_SH =\
	if [ -n "$(RLGLUE_AUTORECONNECT)" ]; then\
	RLGLUE_AUTORECONNECT=" :autoreconnect $(RLGLUE_AUTORECONNECT)";\
	fi\n

get_glue_param = $(if $(findstring $(1),$(2)),$(call quote,$($(1)_SH)))

quote = $(subst ",\",$(subst \,\\,$(1)))
lisp_start_sh = \
	$(shell echo -e "\#! /bin/sh\n\n\
	$(call get_glue_param,RLGLUE_HOST,$(2))\
	$(call get_glue_param,RLGLUE_PORT,$(2))\
	$(call get_glue_param,RLGLUE_AUTORECONNECT,$(2))\
	\n$(call quote,$(2))" > $(1))

